type ARBEIInitialized @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIIssuanced @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  user: Bytes! # address
  inputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  price: BigInt! #uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIPaused @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIRedemption @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  user: Bytes! # address
  outputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  price: BigInt! #uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIUnpaused @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ARBEIApproval @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIFeeRateSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  feeRatePerDayScaled: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIFeeReceiverSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  feeReceiver: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIMethodologistSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  methodologist: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIMethodologySet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  methodology: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIMintFeeToReceiver @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  feeReceiver: Bytes! # address
  timestamp: BigInt! # uint256
  totalSupply: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIMinterSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  minter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEISupplyCeilingSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  supplyCeiling: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIToggledRestricted @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  account: Bytes! # address
  isRestricted: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEITransfer @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIApproval @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIFeeRateSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  feeRatePerDayScaled: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIFeeReceiverSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  feeReceiver: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIInitialized @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIMethodologistSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  methodologist: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIMethodologySet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  methodology: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIMintFeeToReceiver @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  feeReceiver: Bytes! # address
  timestamp: BigInt! # uint256
  totalSupply: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIMinterRemoved @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  minter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIMinterSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  minter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIPaused @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFISupplyCeilingSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  supplyCeiling: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIToggledRestricted @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  account: Bytes! # address
  isRestricted: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFITransfer @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIUnpaused @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIRequestIssuance @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  messageId: Bytes! # bytes32
  nonce: BigInt! # uint256
  user: Bytes! # address
  inputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIRequestRedemption @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  messageId: Bytes! # bytes32
  nonce: BigInt! # uint256
  user: Bytes! # address
  outputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIIssuanced @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  messageId: Bytes! # bytes32
  nonce: BigInt! # uint256
  user: Bytes! # address
  inputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  price: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIMessageSent @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  messageId: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIRedemption @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  messageId: Bytes! # bytes32
  nonce: BigInt! # uint256
  user: Bytes! # address
  outputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  price: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type CRYPTO5Approval @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5FeeRateSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  feeRatePerDayScaled: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5FeeReceiverSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  feeReceiver: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5Initialized @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5MethodologistSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  methodologist: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5MethodologySet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  methodology: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5MintFeeToReceiver @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  feeReceiver: Bytes! # address
  timestamp: BigInt! # uint256
  totalSupply: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5MinterRemoved @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  minter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5MinterSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  minter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5Paused @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5SupplyCeilingSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  supplyCeiling: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5ToggledRestricted @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  account: Bytes! # address
  isRestricted: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5Transfer @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5Unpaused @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5RequestIssuance @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  messageId: Bytes! # bytes32
  nonce: BigInt! # uint256
  user: Bytes! # address
  inputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5RequestRedemption @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  messageId: Bytes! # bytes32
  nonce: BigInt! # uint256
  user: Bytes! # address
  outputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5Issuanced @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  messageId: Bytes! # bytes32
  nonce: BigInt! # uint256
  user: Bytes! # address
  inputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  price: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5MessageSent @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  messageId: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5Redemption @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  messageId: Bytes! # bytes32
  nonce: BigInt! # uint256
  user: Bytes! # address
  outputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  price: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7Approval @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7FeeRateSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  feeRatePerDayScaled: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7FeeReceiverSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  feeReceiver: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7MethodologistSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  methodologist: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7MethodologySet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  methodology: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7MintFeeToReceiver @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  feeReceiver: Bytes! # address
  timestamp: BigInt! # uint256
  totalSupply: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7MinterSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  minter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7Paused @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7SupplyCeilingSet @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  supplyCeiling: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7ToggledRestricted @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  account: Bytes! # address
  isRestricted: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7Transfer @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7Unpaused @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type MAG7Initialized @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  version: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7RequestCancelIssuance @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  nonce: BigInt! # uint256
  user: Bytes! # address
  inputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7RequestCancelRedemption @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  nonce: BigInt! # uint256
  user: Bytes! # address
  outputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7RequestIssuance @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  nonce: BigInt! # uint256
  user: Bytes! # address
  inputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7RequestRedemption @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  nonce: BigInt! # uint256
  user: Bytes! # address
  outputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7IssuanceCancelled @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  nonce: BigInt! # uint256
  user: Bytes! # address
  inputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7Issuanced @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  nonce: BigInt! # uint256
  user: Bytes! # address
  inputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  price: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7Redemption @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  nonce: BigInt! # uint256
  user: Bytes! # address
  outputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  price: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7RedemptionCancelled @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  nonce: BigInt! # uint256
  user: Bytes! # address
  outputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIRebalanced @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7CompleteRebalanceActions @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  nonce: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7FirstRebalanceAction @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  nonce: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7SecondRebalanceAction @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  nonce: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5AskValuesCompleted @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5FirstReweightActionCompleted @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CRYPTO5SecondReweightActionCompleted @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ANFIAskValuesCompleted @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIFirstReweightActionCompleted @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFISecondReweightActionCompleted @entity(immutable: true) {
  id: Bytes!
  network: String! # string
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
